
key_pad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003aa4  08003aa4  00004aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad0  08003ad0  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ad0  08003ad0  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ad0  08003ad0  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad0  08003ad0  00004ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ad4  08003ad4  00004ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003ad8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000001c  08003af4  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003af4  0000514c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5b6  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203b  00000000  00000000  000125fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00014638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009be  00000000  00000000  000152b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a50  00000000  00000000  00015c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecd9  00000000  00000000  0002d6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d3c  00000000  00000000  0003c397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c60d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003350  00000000  00000000  000c6118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c9468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a8c 	.word	0x08003a8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003a8c 	.word	0x08003a8c

0800014c <map>:
uint32_t t_time_1 = 0;
volatile uint8_t uart_flag = 0;
extern uint8_t key_current;

long map(long x, long in_min, long in_max,long out_min, long out_max)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	return (x - in_min)*(out_max - out_min)/(in_max - in_min) + out_min;
 800015a:	68fa      	ldr	r2, [r7, #12]
 800015c:	68bb      	ldr	r3, [r7, #8]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	69b9      	ldr	r1, [r7, #24]
 8000162:	683a      	ldr	r2, [r7, #0]
 8000164:	1a8a      	subs	r2, r1, r2
 8000166:	fb03 f202 	mul.w	r2, r3, r2
 800016a:	6879      	ldr	r1, [r7, #4]
 800016c:	68bb      	ldr	r3, [r7, #8]
 800016e:	1acb      	subs	r3, r1, r3
 8000170:	fb92 f2f3 	sdiv	r2, r2, r3
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	4413      	add	r3, r2
}
 8000178:	4618      	mov	r0, r3
 800017a:	3714      	adds	r7, #20
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr

08000182 <servo_pwm>:

void servo_pwm(TIM_HandleTypeDef *htim, uint32_t channel, int angle)
{
 8000182:	b580      	push	{r7, lr}
 8000184:	b088      	sub	sp, #32
 8000186:	af02      	add	r7, sp, #8
 8000188:	60f8      	str	r0, [r7, #12]
 800018a:	60b9      	str	r1, [r7, #8]
 800018c:	607a      	str	r2, [r7, #4]
//	uint16_t ARR = __HAL_TIM_GET_AUTORELOAD(htim);
//	uint16_t CCR = 1000+((float)angle/180)*1000;
	uint16_t CCR1 = map(angle,0,180,544,2400);
 800018e:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000198:	22b4      	movs	r2, #180	@ 0xb4
 800019a:	2100      	movs	r1, #0
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f7ff ffd5 	bl	800014c <map>
 80001a2:	4603      	mov	r3, r0
 80001a4:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(htim,channel,CCR1);
 80001a6:	68bb      	ldr	r3, [r7, #8]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d104      	bne.n	80001b6 <servo_pwm+0x34>
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	8afa      	ldrh	r2, [r7, #22]
 80001b2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80001b4:	e013      	b.n	80001de <servo_pwm+0x5c>
	__HAL_TIM_SET_COMPARE(htim,channel,CCR1);
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	2b04      	cmp	r3, #4
 80001ba:	d104      	bne.n	80001c6 <servo_pwm+0x44>
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	681a      	ldr	r2, [r3, #0]
 80001c0:	8afb      	ldrh	r3, [r7, #22]
 80001c2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80001c4:	e00b      	b.n	80001de <servo_pwm+0x5c>
	__HAL_TIM_SET_COMPARE(htim,channel,CCR1);
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	2b08      	cmp	r3, #8
 80001ca:	d104      	bne.n	80001d6 <servo_pwm+0x54>
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	8afb      	ldrh	r3, [r7, #22]
 80001d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80001d4:	e003      	b.n	80001de <servo_pwm+0x5c>
	__HAL_TIM_SET_COMPARE(htim,channel,CCR1);
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	8afb      	ldrh	r3, [r7, #22]
 80001dc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80001de:	bf00      	nop
 80001e0:	3718      	adds	r7, #24
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
	...

080001e8 <setup_arm>:
int angle2 = 90;
int angle1 = 90;
int angle4 = 90;

void setup_arm()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	servo_pwm(&htim1, TIM_CHANNEL_1, 90);
 80001ec:	225a      	movs	r2, #90	@ 0x5a
 80001ee:	2100      	movs	r1, #0
 80001f0:	480b      	ldr	r0, [pc, #44]	@ (8000220 <setup_arm+0x38>)
 80001f2:	f7ff ffc6 	bl	8000182 <servo_pwm>
	servo_pwm(&htim1, TIM_CHANNEL_2, 100);
 80001f6:	2264      	movs	r2, #100	@ 0x64
 80001f8:	2104      	movs	r1, #4
 80001fa:	4809      	ldr	r0, [pc, #36]	@ (8000220 <setup_arm+0x38>)
 80001fc:	f7ff ffc1 	bl	8000182 <servo_pwm>
	servo_pwm(&htim1, TIM_CHANNEL_3, 70);
 8000200:	2246      	movs	r2, #70	@ 0x46
 8000202:	2108      	movs	r1, #8
 8000204:	4806      	ldr	r0, [pc, #24]	@ (8000220 <setup_arm+0x38>)
 8000206:	f7ff ffbc 	bl	8000182 <servo_pwm>
	servo_pwm(&htim1, TIM_CHANNEL_4, 90);
 800020a:	225a      	movs	r2, #90	@ 0x5a
 800020c:	210c      	movs	r1, #12
 800020e:	4804      	ldr	r0, [pc, #16]	@ (8000220 <setup_arm+0x38>)
 8000210:	f7ff ffb7 	bl	8000182 <servo_pwm>
	car_control(CAR_STOP_STATE, 40);
 8000214:	2128      	movs	r1, #40	@ 0x28
 8000216:	2000      	movs	r0, #0
 8000218:	f003 fb1c 	bl	8003854 <car_control>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000038 	.word	0x20000038

08000224 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a07      	ldr	r2, [pc, #28]	@ (8000250 <HAL_UART_RxCpltCallback+0x2c>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d107      	bne.n	8000246 <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Receive_IT(huart, &data_rx, 1);
 8000236:	2201      	movs	r2, #1
 8000238:	4906      	ldr	r1, [pc, #24]	@ (8000254 <HAL_UART_RxCpltCallback+0x30>)
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f002 fda9 	bl	8002d92 <HAL_UART_Receive_IT>
		uart_flag = 1;
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <HAL_UART_RxCpltCallback+0x34>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40004800 	.word	0x40004800
 8000254:	20000114 	.word	0x20000114
 8000258:	2000011c 	.word	0x2000011c

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f000 fe18 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 fa58 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f000 fc06 	bl	8000a78 <MX_GPIO_Init>
  MX_TIM1_Init();
 800026c:	f000 fa96 	bl	800079c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000270:	f000 fb58 	bl	8000924 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000274:	f000 fbd6 	bl	8000a24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000278:	2100      	movs	r1, #0
 800027a:	48b5      	ldr	r0, [pc, #724]	@ (8000550 <main+0x2f4>)
 800027c:	f001 fe80 	bl	8001f80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000280:	2104      	movs	r1, #4
 8000282:	48b3      	ldr	r0, [pc, #716]	@ (8000550 <main+0x2f4>)
 8000284:	f001 fe7c 	bl	8001f80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000288:	2108      	movs	r1, #8
 800028a:	48b1      	ldr	r0, [pc, #708]	@ (8000550 <main+0x2f4>)
 800028c:	f001 fe78 	bl	8001f80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000290:	210c      	movs	r1, #12
 8000292:	48af      	ldr	r0, [pc, #700]	@ (8000550 <main+0x2f4>)
 8000294:	f001 fe74 	bl	8001f80 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &data_rx, 1);
 8000298:	2201      	movs	r2, #1
 800029a:	49ae      	ldr	r1, [pc, #696]	@ (8000554 <main+0x2f8>)
 800029c:	48ae      	ldr	r0, [pc, #696]	@ (8000558 <main+0x2fc>)
 800029e:	f002 fd78 	bl	8002d92 <HAL_UART_Receive_IT>
  car_init(&htim2);
 80002a2:	48ae      	ldr	r0, [pc, #696]	@ (800055c <main+0x300>)
 80002a4:	f003 fb34 	bl	8003910 <car_init>
  setup_arm();
 80002a8:	f7ff ff9e 	bl	80001e8 <setup_arm>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(uart_flag)
 80002ac:	4bac      	ldr	r3, [pc, #688]	@ (8000560 <main+0x304>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0fa      	beq.n	80002ac <main+0x50>
	  {
		  switch(data_rx)
 80002b6:	4ba7      	ldr	r3, [pc, #668]	@ (8000554 <main+0x2f8>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	3b30      	subs	r3, #48	@ 0x30
 80002bc:	2b48      	cmp	r3, #72	@ 0x48
 80002be:	f200 821c 	bhi.w	80006fa <main+0x49e>
 80002c2:	a201      	add	r2, pc, #4	@ (adr r2, 80002c8 <main+0x6c>)
 80002c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c8:	080006f5 	.word	0x080006f5
 80002cc:	080006fb 	.word	0x080006fb
 80002d0:	080006fb 	.word	0x080006fb
 80002d4:	080006fb 	.word	0x080006fb
 80002d8:	080006fb 	.word	0x080006fb
 80002dc:	080006fb 	.word	0x080006fb
 80002e0:	080006fb 	.word	0x080006fb
 80002e4:	080006fb 	.word	0x080006fb
 80002e8:	080006fb 	.word	0x080006fb
 80002ec:	080006fb 	.word	0x080006fb
 80002f0:	080006fb 	.word	0x080006fb
 80002f4:	080006fb 	.word	0x080006fb
 80002f8:	080006fb 	.word	0x080006fb
 80002fc:	080006fb 	.word	0x080006fb
 8000300:	080006fb 	.word	0x080006fb
 8000304:	080006fb 	.word	0x080006fb
 8000308:	080006fb 	.word	0x080006fb
 800030c:	080006fb 	.word	0x080006fb
 8000310:	080006cd 	.word	0x080006cd
 8000314:	080006fb 	.word	0x080006fb
 8000318:	080006fb 	.word	0x080006fb
 800031c:	080006fb 	.word	0x080006fb
 8000320:	080006c3 	.word	0x080006c3
 8000324:	080003ed 	.word	0x080003ed
 8000328:	08000541 	.word	0x08000541
 800032c:	08000497 	.word	0x08000497
 8000330:	08000619 	.word	0x08000619
 8000334:	080006fb 	.word	0x080006fb
 8000338:	080006e1 	.word	0x080006e1
 800033c:	080006fb 	.word	0x080006fb
 8000340:	080006fb 	.word	0x080006fb
 8000344:	080006fb 	.word	0x080006fb
 8000348:	080006fb 	.word	0x080006fb
 800034c:	080006fb 	.word	0x080006fb
 8000350:	080006d7 	.word	0x080006d7
 8000354:	080006eb 	.word	0x080006eb
 8000358:	080006fb 	.word	0x080006fb
 800035c:	08000539 	.word	0x08000539
 8000360:	08000611 	.word	0x08000611
 8000364:	0800048f 	.word	0x0800048f
 8000368:	080006bb 	.word	0x080006bb
 800036c:	080006fb 	.word	0x080006fb
 8000370:	080006fb 	.word	0x080006fb
 8000374:	080006fb 	.word	0x080006fb
 8000378:	080006fb 	.word	0x080006fb
 800037c:	080006fb 	.word	0x080006fb
 8000380:	080006fb 	.word	0x080006fb
 8000384:	080006fb 	.word	0x080006fb
 8000388:	080006fb 	.word	0x080006fb
 800038c:	080006fb 	.word	0x080006fb
 8000390:	080006fb 	.word	0x080006fb
 8000394:	080006fb 	.word	0x080006fb
 8000398:	080006fb 	.word	0x080006fb
 800039c:	080006fb 	.word	0x080006fb
 80003a0:	080006fb 	.word	0x080006fb
 80003a4:	080006fb 	.word	0x080006fb
 80003a8:	080006fb 	.word	0x080006fb
 80003ac:	080006fb 	.word	0x080006fb
 80003b0:	080006fb 	.word	0x080006fb
 80003b4:	080006fb 	.word	0x080006fb
 80003b8:	080006fb 	.word	0x080006fb
 80003bc:	080006fb 	.word	0x080006fb
 80003c0:	080006fb 	.word	0x080006fb
 80003c4:	080006fb 	.word	0x080006fb
 80003c8:	080006fb 	.word	0x080006fb
 80003cc:	080006fb 	.word	0x080006fb
 80003d0:	080006fb 	.word	0x080006fb
 80003d4:	080006fb 	.word	0x080006fb
 80003d8:	080006fb 	.word	0x080006fb
 80003dc:	08000531 	.word	0x08000531
 80003e0:	08000609 	.word	0x08000609
 80003e4:	08000487 	.word	0x08000487
 80003e8:	080006b3 	.word	0x080006b3
		  {
			case 'G':
				 switch(servo_state_1)
 80003ec:	4b5d      	ldr	r3, [pc, #372]	@ (8000564 <main+0x308>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d002      	beq.n	80003fa <main+0x19e>
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d021      	beq.n	800043c <main+0x1e0>
							servo_pwm(&htim1, TIM_CHANNEL_1, angle1);
							t_time_1 = HAL_GetTick();
						}
					break;
				 }
				break;
 80003f8:	e180      	b.n	80006fc <main+0x4a0>
						if(HAL_GetTick() - t_time_1 >= 200)
 80003fa:	f000 fda3 	bl	8000f44 <HAL_GetTick>
 80003fe:	4602      	mov	r2, r0
 8000400:	4b59      	ldr	r3, [pc, #356]	@ (8000568 <main+0x30c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	2bc7      	cmp	r3, #199	@ 0xc7
 8000408:	d939      	bls.n	800047e <main+0x222>
							angle1 += 5;
 800040a:	4b58      	ldr	r3, [pc, #352]	@ (800056c <main+0x310>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	3305      	adds	r3, #5
 8000410:	4a56      	ldr	r2, [pc, #344]	@ (800056c <main+0x310>)
 8000412:	6013      	str	r3, [r2, #0]
							if(angle1 >= 180) angle1 = 180;
 8000414:	4b55      	ldr	r3, [pc, #340]	@ (800056c <main+0x310>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2bb3      	cmp	r3, #179	@ 0xb3
 800041a:	dd02      	ble.n	8000422 <main+0x1c6>
 800041c:	4b53      	ldr	r3, [pc, #332]	@ (800056c <main+0x310>)
 800041e:	22b4      	movs	r2, #180	@ 0xb4
 8000420:	601a      	str	r2, [r3, #0]
							servo_pwm(&htim1, TIM_CHANNEL_1, angle1);
 8000422:	4b52      	ldr	r3, [pc, #328]	@ (800056c <main+0x310>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	461a      	mov	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	4849      	ldr	r0, [pc, #292]	@ (8000550 <main+0x2f4>)
 800042c:	f7ff fea9 	bl	8000182 <servo_pwm>
							t_time_1 = HAL_GetTick();
 8000430:	f000 fd88 	bl	8000f44 <HAL_GetTick>
 8000434:	4603      	mov	r3, r0
 8000436:	4a4c      	ldr	r2, [pc, #304]	@ (8000568 <main+0x30c>)
 8000438:	6013      	str	r3, [r2, #0]
					break;
 800043a:	e020      	b.n	800047e <main+0x222>
						if(HAL_GetTick() - t_time_1 >= 200)
 800043c:	f000 fd82 	bl	8000f44 <HAL_GetTick>
 8000440:	4602      	mov	r2, r0
 8000442:	4b49      	ldr	r3, [pc, #292]	@ (8000568 <main+0x30c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	2bc7      	cmp	r3, #199	@ 0xc7
 800044a:	d91a      	bls.n	8000482 <main+0x226>
							angle1 -= 5;
 800044c:	4b47      	ldr	r3, [pc, #284]	@ (800056c <main+0x310>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b05      	subs	r3, #5
 8000452:	4a46      	ldr	r2, [pc, #280]	@ (800056c <main+0x310>)
 8000454:	6013      	str	r3, [r2, #0]
							if(angle1 >= 180) angle1 = 180;
 8000456:	4b45      	ldr	r3, [pc, #276]	@ (800056c <main+0x310>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2bb3      	cmp	r3, #179	@ 0xb3
 800045c:	dd02      	ble.n	8000464 <main+0x208>
 800045e:	4b43      	ldr	r3, [pc, #268]	@ (800056c <main+0x310>)
 8000460:	22b4      	movs	r2, #180	@ 0xb4
 8000462:	601a      	str	r2, [r3, #0]
							servo_pwm(&htim1, TIM_CHANNEL_1, angle1);
 8000464:	4b41      	ldr	r3, [pc, #260]	@ (800056c <main+0x310>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	461a      	mov	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	4838      	ldr	r0, [pc, #224]	@ (8000550 <main+0x2f4>)
 800046e:	f7ff fe88 	bl	8000182 <servo_pwm>
							t_time_1 = HAL_GetTick();
 8000472:	f000 fd67 	bl	8000f44 <HAL_GetTick>
 8000476:	4603      	mov	r3, r0
 8000478:	4a3b      	ldr	r2, [pc, #236]	@ (8000568 <main+0x30c>)
 800047a:	6013      	str	r3, [r2, #0]
					break;
 800047c:	e001      	b.n	8000482 <main+0x226>
					break;
 800047e:	bf00      	nop
 8000480:	e13c      	b.n	80006fc <main+0x4a0>
					break;
 8000482:	bf00      	nop
				break;
 8000484:	e13a      	b.n	80006fc <main+0x4a0>
			case 'w':
				servo_state_1 = SERVO_1_STATE_UP;
 8000486:	4b37      	ldr	r3, [pc, #220]	@ (8000564 <main+0x308>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]
				break;
 800048c:	e136      	b.n	80006fc <main+0x4a0>
			case 'W':
				servo_state_1 = SERVO_1_STATE_DOWN;
 800048e:	4b35      	ldr	r3, [pc, #212]	@ (8000564 <main+0x308>)
 8000490:	2201      	movs	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
				break;
 8000494:	e132      	b.n	80006fc <main+0x4a0>
			case 'I':
				switch(servo_state_2)
 8000496:	4b36      	ldr	r3, [pc, #216]	@ (8000570 <main+0x314>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <main+0x248>
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d021      	beq.n	80004e6 <main+0x28a>
							servo_pwm(&htim1, TIM_CHANNEL_2, angle2);
							t_time_1 = HAL_GetTick();
						}
						break;
					}
				break;
 80004a2:	e12b      	b.n	80006fc <main+0x4a0>
						if(HAL_GetTick() - t_time_1 >= 200)
 80004a4:	f000 fd4e 	bl	8000f44 <HAL_GetTick>
 80004a8:	4602      	mov	r2, r0
 80004aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000568 <main+0x30c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80004b2:	d939      	bls.n	8000528 <main+0x2cc>
							angle2 += 5;
 80004b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000574 <main+0x318>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	3305      	adds	r3, #5
 80004ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000574 <main+0x318>)
 80004bc:	6013      	str	r3, [r2, #0]
							if(angle2 >= 130) angle2 = 130;
 80004be:	4b2d      	ldr	r3, [pc, #180]	@ (8000574 <main+0x318>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b81      	cmp	r3, #129	@ 0x81
 80004c4:	dd02      	ble.n	80004cc <main+0x270>
 80004c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <main+0x318>)
 80004c8:	2282      	movs	r2, #130	@ 0x82
 80004ca:	601a      	str	r2, [r3, #0]
							servo_pwm(&htim1, TIM_CHANNEL_2, angle2);
 80004cc:	4b29      	ldr	r3, [pc, #164]	@ (8000574 <main+0x318>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	2104      	movs	r1, #4
 80004d4:	481e      	ldr	r0, [pc, #120]	@ (8000550 <main+0x2f4>)
 80004d6:	f7ff fe54 	bl	8000182 <servo_pwm>
							t_time_1 = HAL_GetTick();
 80004da:	f000 fd33 	bl	8000f44 <HAL_GetTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a21      	ldr	r2, [pc, #132]	@ (8000568 <main+0x30c>)
 80004e2:	6013      	str	r3, [r2, #0]
						break;
 80004e4:	e020      	b.n	8000528 <main+0x2cc>
						if(HAL_GetTick() - t_time_1 >= 200)
 80004e6:	f000 fd2d 	bl	8000f44 <HAL_GetTick>
 80004ea:	4602      	mov	r2, r0
 80004ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000568 <main+0x30c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80004f4:	d91a      	bls.n	800052c <main+0x2d0>
							angle2 -= 5;
 80004f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <main+0x318>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3b05      	subs	r3, #5
 80004fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000574 <main+0x318>)
 80004fe:	6013      	str	r3, [r2, #0]
							if(angle2 <= 90) angle2 = 90;
 8000500:	4b1c      	ldr	r3, [pc, #112]	@ (8000574 <main+0x318>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b5a      	cmp	r3, #90	@ 0x5a
 8000506:	dc02      	bgt.n	800050e <main+0x2b2>
 8000508:	4b1a      	ldr	r3, [pc, #104]	@ (8000574 <main+0x318>)
 800050a:	225a      	movs	r2, #90	@ 0x5a
 800050c:	601a      	str	r2, [r3, #0]
							servo_pwm(&htim1, TIM_CHANNEL_2, angle2);
 800050e:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <main+0x318>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	461a      	mov	r2, r3
 8000514:	2104      	movs	r1, #4
 8000516:	480e      	ldr	r0, [pc, #56]	@ (8000550 <main+0x2f4>)
 8000518:	f7ff fe33 	bl	8000182 <servo_pwm>
							t_time_1 = HAL_GetTick();
 800051c:	f000 fd12 	bl	8000f44 <HAL_GetTick>
 8000520:	4603      	mov	r3, r0
 8000522:	4a11      	ldr	r2, [pc, #68]	@ (8000568 <main+0x30c>)
 8000524:	6013      	str	r3, [r2, #0]
						break;
 8000526:	e001      	b.n	800052c <main+0x2d0>
						break;
 8000528:	bf00      	nop
 800052a:	e0e7      	b.n	80006fc <main+0x4a0>
						break;
 800052c:	bf00      	nop
				break;
 800052e:	e0e5      	b.n	80006fc <main+0x4a0>
			case 'u':
					servo_state_2 = SERVO_2_STATE_UP;
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <main+0x314>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
					break;
 8000536:	e0e1      	b.n	80006fc <main+0x4a0>
			case 'U':
					servo_state_2 = SERVO_2_STATE_DOWN;
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <main+0x314>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
					break;
 800053e:	e0dd      	b.n	80006fc <main+0x4a0>
				break;
			case 'H':
				switch(servo_state_3)
 8000540:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <main+0x31c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d019      	beq.n	800057c <main+0x320>
 8000548:	2b01      	cmp	r3, #1
 800054a:	d038      	beq.n	80005be <main+0x362>
							servo_pwm(&htim1, TIM_CHANNEL_3, angle3);
							t_time_1 = HAL_GetTick();
						}
						break;
					}
				break;
 800054c:	e0d6      	b.n	80006fc <main+0x4a0>
 800054e:	bf00      	nop
 8000550:	20000038 	.word	0x20000038
 8000554:	20000114 	.word	0x20000114
 8000558:	200000c8 	.word	0x200000c8
 800055c:	20000080 	.word	0x20000080
 8000560:	2000011c 	.word	0x2000011c
 8000564:	20000110 	.word	0x20000110
 8000568:	20000118 	.word	0x20000118
 800056c:	20000008 	.word	0x20000008
 8000570:	20000111 	.word	0x20000111
 8000574:	20000004 	.word	0x20000004
 8000578:	20000112 	.word	0x20000112
						if(HAL_GetTick() - t_time_1 >= 200)
 800057c:	f000 fce2 	bl	8000f44 <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	4b5f      	ldr	r3, [pc, #380]	@ (8000700 <main+0x4a4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	2bc7      	cmp	r3, #199	@ 0xc7
 800058a:	d939      	bls.n	8000600 <main+0x3a4>
							angle3 += 5;
 800058c:	4b5d      	ldr	r3, [pc, #372]	@ (8000704 <main+0x4a8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	3305      	adds	r3, #5
 8000592:	4a5c      	ldr	r2, [pc, #368]	@ (8000704 <main+0x4a8>)
 8000594:	6013      	str	r3, [r2, #0]
							if(angle3 >= 150) angle3 = 150;
 8000596:	4b5b      	ldr	r3, [pc, #364]	@ (8000704 <main+0x4a8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b95      	cmp	r3, #149	@ 0x95
 800059c:	dd02      	ble.n	80005a4 <main+0x348>
 800059e:	4b59      	ldr	r3, [pc, #356]	@ (8000704 <main+0x4a8>)
 80005a0:	2296      	movs	r2, #150	@ 0x96
 80005a2:	601a      	str	r2, [r3, #0]
							servo_pwm(&htim1, TIM_CHANNEL_3, angle3);
 80005a4:	4b57      	ldr	r3, [pc, #348]	@ (8000704 <main+0x4a8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	2108      	movs	r1, #8
 80005ac:	4856      	ldr	r0, [pc, #344]	@ (8000708 <main+0x4ac>)
 80005ae:	f7ff fde8 	bl	8000182 <servo_pwm>
							t_time_1 = HAL_GetTick();
 80005b2:	f000 fcc7 	bl	8000f44 <HAL_GetTick>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a51      	ldr	r2, [pc, #324]	@ (8000700 <main+0x4a4>)
 80005ba:	6013      	str	r3, [r2, #0]
						break;
 80005bc:	e020      	b.n	8000600 <main+0x3a4>
						if(HAL_GetTick() - t_time_1 >= 200)
 80005be:	f000 fcc1 	bl	8000f44 <HAL_GetTick>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000700 <main+0x4a4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80005cc:	d91a      	bls.n	8000604 <main+0x3a8>
							angle3 -= 5;
 80005ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000704 <main+0x4a8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3b05      	subs	r3, #5
 80005d4:	4a4b      	ldr	r2, [pc, #300]	@ (8000704 <main+0x4a8>)
 80005d6:	6013      	str	r3, [r2, #0]
							if(angle3 <= 0) angle3 = 0;
 80005d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000704 <main+0x4a8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	dc02      	bgt.n	80005e6 <main+0x38a>
 80005e0:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <main+0x4a8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
							servo_pwm(&htim1, TIM_CHANNEL_3, angle3);
 80005e6:	4b47      	ldr	r3, [pc, #284]	@ (8000704 <main+0x4a8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	2108      	movs	r1, #8
 80005ee:	4846      	ldr	r0, [pc, #280]	@ (8000708 <main+0x4ac>)
 80005f0:	f7ff fdc7 	bl	8000182 <servo_pwm>
							t_time_1 = HAL_GetTick();
 80005f4:	f000 fca6 	bl	8000f44 <HAL_GetTick>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a41      	ldr	r2, [pc, #260]	@ (8000700 <main+0x4a4>)
 80005fc:	6013      	str	r3, [r2, #0]
						break;
 80005fe:	e001      	b.n	8000604 <main+0x3a8>
						break;
 8000600:	bf00      	nop
 8000602:	e07b      	b.n	80006fc <main+0x4a0>
						break;
 8000604:	bf00      	nop
				break;
 8000606:	e079      	b.n	80006fc <main+0x4a0>
			case 'v':
					servo_state_3 = SERVO_3_STATE_UP;
 8000608:	4b40      	ldr	r3, [pc, #256]	@ (800070c <main+0x4b0>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
					break;
 800060e:	e075      	b.n	80006fc <main+0x4a0>
			case 'V':
					servo_state_3 = SERVO_3_STATE_DOWN;
 8000610:	4b3e      	ldr	r3, [pc, #248]	@ (800070c <main+0x4b0>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
					break;
 8000616:	e071      	b.n	80006fc <main+0x4a0>
				break;
			case 'J':
				switch(servo_state_4)
 8000618:	4b3d      	ldr	r3, [pc, #244]	@ (8000710 <main+0x4b4>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <main+0x3ca>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d021      	beq.n	8000668 <main+0x40c>
							servo_pwm(&htim1, TIM_CHANNEL_4, angle4);
							t_time_1 = HAL_GetTick();
						}
						break;
					}
				break;
 8000624:	e06a      	b.n	80006fc <main+0x4a0>
						if(HAL_GetTick() - t_time_1 >= 200)
 8000626:	f000 fc8d 	bl	8000f44 <HAL_GetTick>
 800062a:	4602      	mov	r2, r0
 800062c:	4b34      	ldr	r3, [pc, #208]	@ (8000700 <main+0x4a4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	2bc7      	cmp	r3, #199	@ 0xc7
 8000634:	d939      	bls.n	80006aa <main+0x44e>
							angle4 += 5;
 8000636:	4b37      	ldr	r3, [pc, #220]	@ (8000714 <main+0x4b8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3305      	adds	r3, #5
 800063c:	4a35      	ldr	r2, [pc, #212]	@ (8000714 <main+0x4b8>)
 800063e:	6013      	str	r3, [r2, #0]
							if(angle4 >= 150) angle4 = 150;
 8000640:	4b34      	ldr	r3, [pc, #208]	@ (8000714 <main+0x4b8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b95      	cmp	r3, #149	@ 0x95
 8000646:	dd02      	ble.n	800064e <main+0x3f2>
 8000648:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <main+0x4b8>)
 800064a:	2296      	movs	r2, #150	@ 0x96
 800064c:	601a      	str	r2, [r3, #0]
							servo_pwm(&htim1, TIM_CHANNEL_4, angle4);
 800064e:	4b31      	ldr	r3, [pc, #196]	@ (8000714 <main+0x4b8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	210c      	movs	r1, #12
 8000656:	482c      	ldr	r0, [pc, #176]	@ (8000708 <main+0x4ac>)
 8000658:	f7ff fd93 	bl	8000182 <servo_pwm>
							t_time_1 = HAL_GetTick();
 800065c:	f000 fc72 	bl	8000f44 <HAL_GetTick>
 8000660:	4603      	mov	r3, r0
 8000662:	4a27      	ldr	r2, [pc, #156]	@ (8000700 <main+0x4a4>)
 8000664:	6013      	str	r3, [r2, #0]
						break;
 8000666:	e020      	b.n	80006aa <main+0x44e>
						if(HAL_GetTick() - t_time_1 >= 200)
 8000668:	f000 fc6c 	bl	8000f44 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	4b24      	ldr	r3, [pc, #144]	@ (8000700 <main+0x4a4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	2bc7      	cmp	r3, #199	@ 0xc7
 8000676:	d91a      	bls.n	80006ae <main+0x452>
							angle4 -= 5;
 8000678:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <main+0x4b8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b05      	subs	r3, #5
 800067e:	4a25      	ldr	r2, [pc, #148]	@ (8000714 <main+0x4b8>)
 8000680:	6013      	str	r3, [r2, #0]
							if(angle4 <= 0) angle4 = 0;
 8000682:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <main+0x4b8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	dc02      	bgt.n	8000690 <main+0x434>
 800068a:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <main+0x4b8>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
							servo_pwm(&htim1, TIM_CHANNEL_4, angle4);
 8000690:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <main+0x4b8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	210c      	movs	r1, #12
 8000698:	481b      	ldr	r0, [pc, #108]	@ (8000708 <main+0x4ac>)
 800069a:	f7ff fd72 	bl	8000182 <servo_pwm>
							t_time_1 = HAL_GetTick();
 800069e:	f000 fc51 	bl	8000f44 <HAL_GetTick>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a16      	ldr	r2, [pc, #88]	@ (8000700 <main+0x4a4>)
 80006a6:	6013      	str	r3, [r2, #0]
						break;
 80006a8:	e001      	b.n	80006ae <main+0x452>
						break;
 80006aa:	bf00      	nop
 80006ac:	e026      	b.n	80006fc <main+0x4a0>
						break;
 80006ae:	bf00      	nop
				break;
 80006b0:	e024      	b.n	80006fc <main+0x4a0>
			case 'x':
					servo_state_4 = SERVO_4_STATE_UP;
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <main+0x4b4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
					break;
 80006b8:	e020      	b.n	80006fc <main+0x4a0>
			case 'X':
					servo_state_4 = SERVO_4_STATE_DOWN;
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <main+0x4b4>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
					break;
 80006c0:	e01c      	b.n	80006fc <main+0x4a0>
				break;
			case 'F':
				car_control(CAR_FORWARD_STATE, 40);
 80006c2:	2128      	movs	r1, #40	@ 0x28
 80006c4:	2001      	movs	r0, #1
 80006c6:	f003 f8c5 	bl	8003854 <car_control>
				break;
 80006ca:	e017      	b.n	80006fc <main+0x4a0>
			case 'B':
				car_control(CAR_BACKWARD_STATE, 40);
 80006cc:	2128      	movs	r1, #40	@ 0x28
 80006ce:	2002      	movs	r0, #2
 80006d0:	f003 f8c0 	bl	8003854 <car_control>
				break;
 80006d4:	e012      	b.n	80006fc <main+0x4a0>
			case 'R':
				car_control(CAR_LEFT_STATE, 40);
 80006d6:	2128      	movs	r1, #40	@ 0x28
 80006d8:	2003      	movs	r0, #3
 80006da:	f003 f8bb 	bl	8003854 <car_control>
				break;
 80006de:	e00d      	b.n	80006fc <main+0x4a0>
			case 'L':
				car_control(CAR_RIGHT_STATE, 40);
 80006e0:	2128      	movs	r1, #40	@ 0x28
 80006e2:	2004      	movs	r0, #4
 80006e4:	f003 f8b6 	bl	8003854 <car_control>
				break;
 80006e8:	e008      	b.n	80006fc <main+0x4a0>
			case 'S':
				car_control(CAR_STOP_STATE, 40);
 80006ea:	2128      	movs	r1, #40	@ 0x28
 80006ec:	2000      	movs	r0, #0
 80006ee:	f003 f8b1 	bl	8003854 <car_control>
				break;
 80006f2:	e003      	b.n	80006fc <main+0x4a0>
			case '0':
				setup_arm();
 80006f4:	f7ff fd78 	bl	80001e8 <setup_arm>
				break;
 80006f8:	e000      	b.n	80006fc <main+0x4a0>
			default:
				break;
 80006fa:	bf00      	nop
	  if(uart_flag)
 80006fc:	e5d6      	b.n	80002ac <main+0x50>
 80006fe:	bf00      	nop
 8000700:	20000118 	.word	0x20000118
 8000704:	20000000 	.word	0x20000000
 8000708:	20000038 	.word	0x20000038
 800070c:	20000112 	.word	0x20000112
 8000710:	20000113 	.word	0x20000113
 8000714:	2000000c 	.word	0x2000000c

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b090      	sub	sp, #64	@ 0x40
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0318 	add.w	r3, r7, #24
 8000722:	2228      	movs	r2, #40	@ 0x28
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 f983 	bl	8003a32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073a:	2302      	movs	r3, #2
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073e:	2301      	movs	r3, #1
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	2310      	movs	r3, #16
 8000744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800074a:	2300      	movs	r3, #0
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800074e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0318 	add.w	r3, r7, #24
 8000758:	4618      	mov	r0, r3
 800075a:	f000 ff59 	bl	8001610 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000764:	f000 f9e6 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2102      	movs	r1, #2
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f9c6 	bl	8001b14 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800078e:	f000 f9d1 	bl	8000b34 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3740      	adds	r7, #64	@ 0x40
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b096      	sub	sp, #88	@ 0x58
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2220      	movs	r2, #32
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 f92c 	bl	8003a32 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007da:	4b50      	ldr	r3, [pc, #320]	@ (800091c <MX_TIM1_Init+0x180>)
 80007dc:	4a50      	ldr	r2, [pc, #320]	@ (8000920 <MX_TIM1_Init+0x184>)
 80007de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80007e0:	4b4e      	ldr	r3, [pc, #312]	@ (800091c <MX_TIM1_Init+0x180>)
 80007e2:	223f      	movs	r2, #63	@ 0x3f
 80007e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b4d      	ldr	r3, [pc, #308]	@ (800091c <MX_TIM1_Init+0x180>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80007ec:	4b4b      	ldr	r3, [pc, #300]	@ (800091c <MX_TIM1_Init+0x180>)
 80007ee:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b49      	ldr	r3, [pc, #292]	@ (800091c <MX_TIM1_Init+0x180>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fa:	4b48      	ldr	r3, [pc, #288]	@ (800091c <MX_TIM1_Init+0x180>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b46      	ldr	r3, [pc, #280]	@ (800091c <MX_TIM1_Init+0x180>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000806:	4845      	ldr	r0, [pc, #276]	@ (800091c <MX_TIM1_Init+0x180>)
 8000808:	f001 fb12 	bl	8001e30 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000812:	f000 f98f 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000820:	4619      	mov	r1, r3
 8000822:	483e      	ldr	r0, [pc, #248]	@ (800091c <MX_TIM1_Init+0x180>)
 8000824:	f001 fe00 	bl	8002428 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800082e:	f000 f981 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000832:	483a      	ldr	r0, [pc, #232]	@ (800091c <MX_TIM1_Init+0x180>)
 8000834:	f001 fb4b 	bl	8001ece <HAL_TIM_PWM_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800083e:	f000 f979 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800084e:	4619      	mov	r1, r3
 8000850:	4832      	ldr	r0, [pc, #200]	@ (800091c <MX_TIM1_Init+0x180>)
 8000852:	f002 f98d 	bl	8002b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800085c:	f000 f96a 	bl	8000b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000860:	2360      	movs	r3, #96	@ 0x60
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800086c:	2300      	movs	r3, #0
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	4825      	ldr	r0, [pc, #148]	@ (800091c <MX_TIM1_Init+0x180>)
 8000886:	f001 fd0d 	bl	80022a4 <HAL_TIM_PWM_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000890:	f000 f950 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000898:	2204      	movs	r2, #4
 800089a:	4619      	mov	r1, r3
 800089c:	481f      	ldr	r0, [pc, #124]	@ (800091c <MX_TIM1_Init+0x180>)
 800089e:	f001 fd01 	bl	80022a4 <HAL_TIM_PWM_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80008a8:	f000 f944 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b0:	2208      	movs	r2, #8
 80008b2:	4619      	mov	r1, r3
 80008b4:	4819      	ldr	r0, [pc, #100]	@ (800091c <MX_TIM1_Init+0x180>)
 80008b6:	f001 fcf5 	bl	80022a4 <HAL_TIM_PWM_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80008c0:	f000 f938 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c8:	220c      	movs	r2, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <MX_TIM1_Init+0x180>)
 80008ce:	f001 fce9 	bl	80022a4 <HAL_TIM_PWM_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80008d8:	f000 f92c 	bl	8000b34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4807      	ldr	r0, [pc, #28]	@ (800091c <MX_TIM1_Init+0x180>)
 8000900:	f002 f994 	bl	8002c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800090a:	f000 f913 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800090e:	4803      	ldr	r0, [pc, #12]	@ (800091c <MX_TIM1_Init+0x180>)
 8000910:	f000 f980 	bl	8000c14 <HAL_TIM_MspPostInit>

}
 8000914:	bf00      	nop
 8000916:	3758      	adds	r7, #88	@ 0x58
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000038 	.word	0x20000038
 8000920:	40012c00 	.word	0x40012c00

08000924 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	@ 0x38
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]
 8000952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000954:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 8000956:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800095a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800095c:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 800095e:	223f      	movs	r2, #63	@ 0x3f
 8000960:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000968:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 800096a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800096e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800097c:	4828      	ldr	r0, [pc, #160]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 800097e:	f001 fa57 	bl	8001e30 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000988:	f000 f8d4 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000996:	4619      	mov	r1, r3
 8000998:	4821      	ldr	r0, [pc, #132]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 800099a:	f001 fd45 	bl	8002428 <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009a4:	f000 f8c6 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009a8:	481d      	ldr	r0, [pc, #116]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 80009aa:	f001 fa90 	bl	8001ece <HAL_TIM_PWM_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009b4:	f000 f8be 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	4619      	mov	r1, r3
 80009c6:	4816      	ldr	r0, [pc, #88]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 80009c8:	f002 f8d2 	bl	8002b70 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009d2:	f000 f8af 	bl	8000b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d6:	2360      	movs	r3, #96	@ 0x60
 80009d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 80009ee:	f001 fc59 	bl	80022a4 <HAL_TIM_PWM_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009f8:	f000 f89c 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2204      	movs	r2, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 8000a04:	f001 fc4e 	bl	80022a4 <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a0e:	f000 f891 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a12:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <MX_TIM2_Init+0xfc>)
 8000a14:	f000 f8fe 	bl	8000c14 <HAL_TIM_MspPostInit>

}
 8000a18:	bf00      	nop
 8000a1a:	3738      	adds	r7, #56	@ 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000080 	.word	0x20000080

08000a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <MX_USART3_UART_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_USART3_UART_Init+0x4c>)
 8000a5c:	f002 f949 	bl	8002cf2 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f865 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000c8 	.word	0x200000c8
 8000a74:	40004800 	.word	0x40004800

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <MX_GPIO_Init+0xb0>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <MX_GPIO_Init+0xb0>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <MX_GPIO_Init+0xb0>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <MX_GPIO_Init+0xb0>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <MX_GPIO_Init+0xb0>)
 8000aaa:	f043 0308 	orr.w	r3, r3, #8
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <MX_GPIO_Init+0xb0>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	210f      	movs	r1, #15
 8000ac0:	481a      	ldr	r0, [pc, #104]	@ (8000b2c <MX_GPIO_Init+0xb4>)
 8000ac2:	f000 fd8d 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pin_motor_1_Pin|pin_motor_2_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2130      	movs	r1, #48	@ 0x30
 8000aca:	4819      	ldr	r0, [pc, #100]	@ (8000b30 <MX_GPIO_Init+0xb8>)
 8000acc:	f000 fd88 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2302      	movs	r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4811      	ldr	r0, [pc, #68]	@ (8000b2c <MX_GPIO_Init+0xb4>)
 8000ae8:	f000 fbf6 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aec:	23f0      	movs	r3, #240	@ 0xf0
 8000aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4619      	mov	r1, r3
 8000afe:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <MX_GPIO_Init+0xb4>)
 8000b00:	f000 fbea 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : pin_motor_1_Pin pin_motor_2_Pin */
  GPIO_InitStruct.Pin = pin_motor_1_Pin|pin_motor_2_Pin;
 8000b04:	2330      	movs	r3, #48	@ 0x30
 8000b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2302      	movs	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_GPIO_Init+0xb8>)
 8000b1c:	f000 fbdc 	bl	80012d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <HAL_MspInit+0x5c>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <HAL_MspInit+0x5c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6193      	str	r3, [r2, #24]
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_MspInit+0x5c>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <HAL_MspInit+0x5c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <HAL_MspInit+0x5c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_MspInit+0x5c>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_MspInit+0x60>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_MspInit+0x60>)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a16      	ldr	r2, [pc, #88]	@ (8000c0c <HAL_TIM_Base_MspInit+0x68>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d114      	bne.n	8000be0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_TIM_Base_MspInit+0x6c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <HAL_TIM_Base_MspInit+0x6c>)
 8000bbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <HAL_TIM_Base_MspInit+0x6c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2019      	movs	r0, #25
 8000bd4:	f000 fa97 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000bd8:	2019      	movs	r0, #25
 8000bda:	f000 fab0 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bde:	e010      	b.n	8000c02 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000be8:	d10b      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_TIM_Base_MspInit+0x6c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_TIM_Base_MspInit+0x6c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_TIM_Base_MspInit+0x6c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40012c00 	.word	0x40012c00
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a34      	ldr	r2, [pc, #208]	@ (8000d00 <HAL_TIM_MspPostInit+0xec>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d119      	bne.n	8000c68 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a32      	ldr	r2, [pc, #200]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c4c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2302      	movs	r3, #2
 8000c58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4829      	ldr	r0, [pc, #164]	@ (8000d08 <HAL_TIM_MspPostInit+0xf4>)
 8000c62:	f000 fb39 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c66:	e047      	b.n	8000cf8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c70:	d142      	bne.n	8000cf8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a23      	ldr	r2, [pc, #140]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <HAL_TIM_MspPostInit+0xf0>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = pwm_motor_1_Pin;
 8000ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2302      	movs	r3, #2
 8000cae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(pwm_motor_1_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <HAL_TIM_MspPostInit+0xf4>)
 8000cb8:	f000 fb0e 	bl	80012d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = pwm_motor_2_Pin;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(pwm_motor_2_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480f      	ldr	r0, [pc, #60]	@ (8000d0c <HAL_TIM_MspPostInit+0xf8>)
 8000cd0:	f000 fb02 	bl	80012d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_TIM_MspPostInit+0xfc>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cf2:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_TIM_MspPostInit+0xfc>)
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf6:	6053      	str	r3, [r2, #4]
}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	@ 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40012c00 	.word	0x40012c00
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40010000 	.word	0x40010000

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a20      	ldr	r2, [pc, #128]	@ (8000db0 <HAL_UART_MspInit+0x9c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d139      	bne.n	8000da8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <HAL_UART_MspInit+0xa0>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	4a1e      	ldr	r2, [pc, #120]	@ (8000db4 <HAL_UART_MspInit+0xa0>)
 8000d3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3e:	61d3      	str	r3, [r2, #28]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_UART_MspInit+0xa0>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_UART_MspInit+0xa0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <HAL_UART_MspInit+0xa0>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_UART_MspInit+0xa0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <HAL_UART_MspInit+0xa4>)
 8000d7a:	f000 faad 	bl	80012d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <HAL_UART_MspInit+0xa4>)
 8000d94:	f000 faa0 	bl	80012d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2027      	movs	r0, #39	@ 0x27
 8000d9e:	f000 f9b2 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000da2:	2027      	movs	r0, #39	@ 0x27
 8000da4:	f000 f9cb 	bl	800113e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40004800 	.word	0x40004800
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f888 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <TIM1_UP_IRQHandler+0x10>)
 8000e1a:	f001 f953 	bl	80020c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000038 	.word	0x20000038

08000e28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <USART3_IRQHandler+0x10>)
 8000e2e:	f001 ffd5 	bl	8002ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000c8 	.word	0x200000c8

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e48:	f7ff fff8 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e4e:	490c      	ldr	r1, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e50:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a09      	ldr	r2, [pc, #36]	@ (8000e88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e64:	4c09      	ldr	r4, [pc, #36]	@ (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f002 fde7 	bl	8003a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e76:	f7ff f9f1 	bl	800025c <main>
  bx lr
 8000e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e84:	08003ad8 	.word	0x08003ad8
  ldr r2, =_sbss
 8000e88:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e8c:	2000014c 	.word	0x2000014c

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_Init+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_Init+0x28>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f923 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe46 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f93b 	bl	800115a <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f903 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000010 	.word	0x20000010
 8000f18:	20000018 	.word	0x20000018
 8000f1c:	20000014 	.word	0x20000014

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000018 	.word	0x20000018
 8000f40:	20000120 	.word	0x20000120

08000f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	@ (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000120 	.word	0x20000120

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4906      	ldr	r1, [pc, #24]	@ (8000ff0 <__NVIC_EnableIRQ+0x34>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	@ (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	@ (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	@ 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	@ 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff90 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff2d 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff42 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff90 	bl	8001048 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff35 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d008      	beq.n	800119c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2204      	movs	r2, #4
 800118e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e020      	b.n	80011de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 020e 	bic.w	r2, r2, #14
 80011aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d005      	beq.n	800120c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2204      	movs	r2, #4
 8001204:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e051      	b.n	80012b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 020e 	bic.w	r2, r2, #14
 800121a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a22      	ldr	r2, [pc, #136]	@ (80012bc <HAL_DMA_Abort_IT+0xd4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d029      	beq.n	800128a <HAL_DMA_Abort_IT+0xa2>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a21      	ldr	r2, [pc, #132]	@ (80012c0 <HAL_DMA_Abort_IT+0xd8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d022      	beq.n	8001286 <HAL_DMA_Abort_IT+0x9e>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_DMA_Abort_IT+0xdc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01a      	beq.n	8001280 <HAL_DMA_Abort_IT+0x98>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1e      	ldr	r2, [pc, #120]	@ (80012c8 <HAL_DMA_Abort_IT+0xe0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d012      	beq.n	800127a <HAL_DMA_Abort_IT+0x92>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1c      	ldr	r2, [pc, #112]	@ (80012cc <HAL_DMA_Abort_IT+0xe4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00a      	beq.n	8001274 <HAL_DMA_Abort_IT+0x8c>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <HAL_DMA_Abort_IT+0xe8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d102      	bne.n	800126e <HAL_DMA_Abort_IT+0x86>
 8001268:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800126c:	e00e      	b.n	800128c <HAL_DMA_Abort_IT+0xa4>
 800126e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001272:	e00b      	b.n	800128c <HAL_DMA_Abort_IT+0xa4>
 8001274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001278:	e008      	b.n	800128c <HAL_DMA_Abort_IT+0xa4>
 800127a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127e:	e005      	b.n	800128c <HAL_DMA_Abort_IT+0xa4>
 8001280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001284:	e002      	b.n	800128c <HAL_DMA_Abort_IT+0xa4>
 8001286:	2310      	movs	r3, #16
 8001288:	e000      	b.n	800128c <HAL_DMA_Abort_IT+0xa4>
 800128a:	2301      	movs	r3, #1
 800128c:	4a11      	ldr	r2, [pc, #68]	@ (80012d4 <HAL_DMA_Abort_IT+0xec>)
 800128e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
    } 
  }
  return status;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020008 	.word	0x40020008
 80012c0:	4002001c 	.word	0x4002001c
 80012c4:	40020030 	.word	0x40020030
 80012c8:	40020044 	.word	0x40020044
 80012cc:	40020058 	.word	0x40020058
 80012d0:	4002006c 	.word	0x4002006c
 80012d4:	40020000 	.word	0x40020000

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b08b      	sub	sp, #44	@ 0x2c
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e169      	b.n	80015c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012ec:	2201      	movs	r2, #1
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8158 	bne.w	80015ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a9a      	ldr	r2, [pc, #616]	@ (8001578 <HAL_GPIO_Init+0x2a0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d05e      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001314:	4a98      	ldr	r2, [pc, #608]	@ (8001578 <HAL_GPIO_Init+0x2a0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d875      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800131a:	4a98      	ldr	r2, [pc, #608]	@ (800157c <HAL_GPIO_Init+0x2a4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d058      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001320:	4a96      	ldr	r2, [pc, #600]	@ (800157c <HAL_GPIO_Init+0x2a4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d86f      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001326:	4a96      	ldr	r2, [pc, #600]	@ (8001580 <HAL_GPIO_Init+0x2a8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d052      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 800132c:	4a94      	ldr	r2, [pc, #592]	@ (8001580 <HAL_GPIO_Init+0x2a8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d869      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001332:	4a94      	ldr	r2, [pc, #592]	@ (8001584 <HAL_GPIO_Init+0x2ac>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d04c      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001338:	4a92      	ldr	r2, [pc, #584]	@ (8001584 <HAL_GPIO_Init+0x2ac>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d863      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800133e:	4a92      	ldr	r2, [pc, #584]	@ (8001588 <HAL_GPIO_Init+0x2b0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d046      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001344:	4a90      	ldr	r2, [pc, #576]	@ (8001588 <HAL_GPIO_Init+0x2b0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d85d      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d82a      	bhi.n	80013a4 <HAL_GPIO_Init+0xcc>
 800134e:	2b12      	cmp	r3, #18
 8001350:	d859      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001352:	a201      	add	r2, pc, #4	@ (adr r2, 8001358 <HAL_GPIO_Init+0x80>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	080013d3 	.word	0x080013d3
 800135c:	080013ad 	.word	0x080013ad
 8001360:	080013bf 	.word	0x080013bf
 8001364:	08001401 	.word	0x08001401
 8001368:	08001407 	.word	0x08001407
 800136c:	08001407 	.word	0x08001407
 8001370:	08001407 	.word	0x08001407
 8001374:	08001407 	.word	0x08001407
 8001378:	08001407 	.word	0x08001407
 800137c:	08001407 	.word	0x08001407
 8001380:	08001407 	.word	0x08001407
 8001384:	08001407 	.word	0x08001407
 8001388:	08001407 	.word	0x08001407
 800138c:	08001407 	.word	0x08001407
 8001390:	08001407 	.word	0x08001407
 8001394:	08001407 	.word	0x08001407
 8001398:	08001407 	.word	0x08001407
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013c9 	.word	0x080013c9
 80013a4:	4a79      	ldr	r2, [pc, #484]	@ (800158c <HAL_GPIO_Init+0x2b4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013aa:	e02c      	b.n	8001406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	623b      	str	r3, [r7, #32]
          break;
 80013b2:	e029      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	3304      	adds	r3, #4
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	e024      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	3308      	adds	r3, #8
 80013c4:	623b      	str	r3, [r7, #32]
          break;
 80013c6:	e01f      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	330c      	adds	r3, #12
 80013ce:	623b      	str	r3, [r7, #32]
          break;
 80013d0:	e01a      	b.n	8001408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013da:	2304      	movs	r3, #4
 80013dc:	623b      	str	r3, [r7, #32]
          break;
 80013de:	e013      	b.n	8001408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	611a      	str	r2, [r3, #16]
          break;
 80013f2:	e009      	b.n	8001408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f4:	2308      	movs	r3, #8
 80013f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	615a      	str	r2, [r3, #20]
          break;
 80013fe:	e003      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x130>
          break;
 8001406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	@ 0xff
 800140c:	d801      	bhi.n	8001412 <HAL_GPIO_Init+0x13a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	e001      	b.n	8001416 <HAL_GPIO_Init+0x13e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2bff      	cmp	r3, #255	@ 0xff
 800141c:	d802      	bhi.n	8001424 <HAL_GPIO_Init+0x14c>
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0x152>
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	3b08      	subs	r3, #8
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	210f      	movs	r1, #15
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	6a39      	ldr	r1, [r7, #32]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80b1 	beq.w	80015ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001458:	4b4d      	ldr	r3, [pc, #308]	@ (8001590 <HAL_GPIO_Init+0x2b8>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a4c      	ldr	r2, [pc, #304]	@ (8001590 <HAL_GPIO_Init+0x2b8>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b4a      	ldr	r3, [pc, #296]	@ (8001590 <HAL_GPIO_Init+0x2b8>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001470:	4a48      	ldr	r2, [pc, #288]	@ (8001594 <HAL_GPIO_Init+0x2bc>)
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a40      	ldr	r2, [pc, #256]	@ (8001598 <HAL_GPIO_Init+0x2c0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x1ec>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3f      	ldr	r2, [pc, #252]	@ (800159c <HAL_GPIO_Init+0x2c4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1e8>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3e      	ldr	r2, [pc, #248]	@ (80015a0 <HAL_GPIO_Init+0x2c8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1e4>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a3d      	ldr	r2, [pc, #244]	@ (80015a4 <HAL_GPIO_Init+0x2cc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1e0>
 80014b4:	2303      	movs	r3, #3
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e004      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014bc:	2302      	movs	r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014c4:	2300      	movs	r3, #0
 80014c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c8:	f002 0203 	and.w	r2, r2, #3
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	4093      	lsls	r3, r2
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014d6:	492f      	ldr	r1, [pc, #188]	@ (8001594 <HAL_GPIO_Init+0x2bc>)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	492c      	ldr	r1, [pc, #176]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	43db      	mvns	r3, r3
 8001506:	4928      	ldr	r1, [pc, #160]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001508:	4013      	ands	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001518:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	4922      	ldr	r1, [pc, #136]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	43db      	mvns	r3, r3
 800152e:	491e      	ldr	r1, [pc, #120]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001530:	4013      	ands	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4918      	ldr	r1, [pc, #96]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800154e:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4914      	ldr	r1, [pc, #80]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001558:	4013      	ands	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d021      	beq.n	80015ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	490e      	ldr	r1, [pc, #56]	@ (80015a8 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e021      	b.n	80015ba <HAL_GPIO_Init+0x2e2>
 8001576:	bf00      	nop
 8001578:	10320000 	.word	0x10320000
 800157c:	10310000 	.word	0x10310000
 8001580:	10220000 	.word	0x10220000
 8001584:	10210000 	.word	0x10210000
 8001588:	10120000 	.word	0x10120000
 800158c:	10110000 	.word	0x10110000
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000
 8001598:	40010800 	.word	0x40010800
 800159c:	40010c00 	.word	0x40010c00
 80015a0:	40011000 	.word	0x40011000
 80015a4:	40011400 	.word	0x40011400
 80015a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_GPIO_Init+0x304>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4909      	ldr	r1, [pc, #36]	@ (80015dc <HAL_GPIO_Init+0x304>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	3301      	adds	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f47f ae8e 	bne.w	80012ec <HAL_GPIO_Init+0x14>
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	372c      	adds	r7, #44	@ 0x2c
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	611a      	str	r2, [r3, #16]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e272      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8087 	beq.w	800173e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001630:	4b92      	ldr	r3, [pc, #584]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b04      	cmp	r3, #4
 800163a:	d00c      	beq.n	8001656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800163c:	4b8f      	ldr	r3, [pc, #572]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d112      	bne.n	800166e <HAL_RCC_OscConfig+0x5e>
 8001648:	4b8c      	ldr	r3, [pc, #560]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001654:	d10b      	bne.n	800166e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001656:	4b89      	ldr	r3, [pc, #548]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06c      	beq.n	800173c <HAL_RCC_OscConfig+0x12c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d168      	bne.n	800173c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e24c      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x76>
 8001678:	4b80      	ldr	r3, [pc, #512]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a7f      	ldr	r2, [pc, #508]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e02e      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x98>
 800168e:	4b7b      	ldr	r3, [pc, #492]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7a      	ldr	r2, [pc, #488]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b78      	ldr	r3, [pc, #480]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a77      	ldr	r2, [pc, #476]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0xbc>
 80016b2:	4b72      	ldr	r3, [pc, #456]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a71      	ldr	r2, [pc, #452]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b6f      	ldr	r3, [pc, #444]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6e      	ldr	r2, [pc, #440]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 80016cc:	4b6b      	ldr	r3, [pc, #428]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6a      	ldr	r2, [pc, #424]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b68      	ldr	r3, [pc, #416]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a67      	ldr	r2, [pc, #412]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc2a 	bl	8000f44 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc26 	bl	8000f44 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e200      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b5d      	ldr	r3, [pc, #372]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe4>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fc16 	bl	8000f44 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fc12 	bl	8000f44 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	@ 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1ec      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x10c>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174a:	4b4c      	ldr	r3, [pc, #304]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001756:	4b49      	ldr	r3, [pc, #292]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b08      	cmp	r3, #8
 8001760:	d11c      	bne.n	800179c <HAL_RCC_OscConfig+0x18c>
 8001762:	4b46      	ldr	r3, [pc, #280]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b43      	ldr	r3, [pc, #268]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x176>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1c0      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b3d      	ldr	r3, [pc, #244]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4939      	ldr	r1, [pc, #228]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e03a      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b36      	ldr	r3, [pc, #216]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fbcb 	bl	8000f44 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fbc7 	bl	8000f44 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e1a1      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4927      	ldr	r1, [pc, #156]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fbaa 	bl	8000f44 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fba6 	bl	8000f44 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e180      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d03a      	beq.n	8001894 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d019      	beq.n	800185a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <HAL_RCC_OscConfig+0x274>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fb8a 	bl	8000f44 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fb86 	bl	8000f44 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e160      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 face 	bl	8001df4 <RCC_Delay>
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_RCC_OscConfig+0x274>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fb70 	bl	8000f44 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001866:	e00f      	b.n	8001888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fb6c 	bl	8000f44 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d908      	bls.n	8001888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e146      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	42420000 	.word	0x42420000
 8001884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	4b92      	ldr	r3, [pc, #584]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e9      	bne.n	8001868 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a6 	beq.w	80019ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10d      	bne.n	80018ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b88      	ldr	r3, [pc, #544]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a87      	ldr	r2, [pc, #540]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b85      	ldr	r3, [pc, #532]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ca:	2301      	movs	r3, #1
 80018cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b82      	ldr	r3, [pc, #520]	@ (8001ad8 <HAL_RCC_OscConfig+0x4c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018da:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad8 <HAL_RCC_OscConfig+0x4c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad8 <HAL_RCC_OscConfig+0x4c8>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb2d 	bl	8000f44 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ee:	f7ff fb29 	bl	8000f44 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b64      	cmp	r3, #100	@ 0x64
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e103      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	4b75      	ldr	r3, [pc, #468]	@ (8001ad8 <HAL_RCC_OscConfig+0x4c8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x312>
 8001914:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	e02d      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x334>
 800192a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a69      	ldr	r2, [pc, #420]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6213      	str	r3, [r2, #32]
 8001936:	4b67      	ldr	r3, [pc, #412]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a66      	ldr	r2, [pc, #408]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	e01c      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b05      	cmp	r3, #5
 800194a:	d10c      	bne.n	8001966 <HAL_RCC_OscConfig+0x356>
 800194c:	4b61      	ldr	r3, [pc, #388]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4a60      	ldr	r2, [pc, #384]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6213      	str	r3, [r2, #32]
 8001958:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	e00b      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001966:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	4b58      	ldr	r3, [pc, #352]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a57      	ldr	r2, [pc, #348]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fadd 	bl	8000f44 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fad9 	bl	8000f44 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0b1      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ee      	beq.n	800198e <HAL_RCC_OscConfig+0x37e>
 80019b0:	e014      	b.n	80019dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fac7 	bl	8000f44 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fac3 	bl	8000f44 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e09b      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ee      	bne.n	80019ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d105      	bne.n	80019ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8087 	beq.w	8001b06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f8:	4b36      	ldr	r3, [pc, #216]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d061      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d146      	bne.n	8001a9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b33      	ldr	r3, [pc, #204]	@ (8001adc <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa97 	bl	8000f44 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff fa93 	bl	8000f44 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e06d      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a40:	d108      	bne.n	8001a54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4921      	ldr	r1, [pc, #132]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a19      	ldr	r1, [r3, #32]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	430b      	orrs	r3, r1
 8001a66:	491b      	ldr	r1, [pc, #108]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x4cc>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa67 	bl	8000f44 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff fa63 	bl	8000f44 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e03d      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x46a>
 8001a98:	e035      	b.n	8001b06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <HAL_RCC_OscConfig+0x4cc>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fa50 	bl	8000f44 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fa4c 	bl	8000f44 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e026      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x498>
 8001ac6:	e01e      	b.n	8001b06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e019      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_OscConfig+0x500>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000

08001b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0d0      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d910      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b67      	ldr	r3, [pc, #412]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4965      	ldr	r1, [pc, #404]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b63      	ldr	r3, [pc, #396]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0b8      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b70:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a58      	ldr	r2, [pc, #352]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b50      	ldr	r3, [pc, #320]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	494d      	ldr	r1, [pc, #308]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d040      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d115      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e07f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e073      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06b      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b39      	ldr	r3, [pc, #228]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4936      	ldr	r1, [pc, #216]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f99e 	bl	8000f44 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff f99a 	bl	8000f44 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e053      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d210      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4922      	ldr	r1, [pc, #136]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e032      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4916      	ldr	r1, [pc, #88]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	490e      	ldr	r1, [pc, #56]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca2:	f000 f821 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	490a      	ldr	r1, [pc, #40]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	5ccb      	ldrb	r3, [r1, r3]
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f8fc 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08003aa4 	.word	0x08003aa4
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	20000014 	.word	0x20000014

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x30>
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x36>
 8001d16:	e027      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1a:	613b      	str	r3, [r7, #16]
      break;
 8001d1c:	e027      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0c5b      	lsrs	r3, r3, #17
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	4a11      	ldr	r2, [pc, #68]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4a:	fb03 f202 	mul.w	r2, r3, r2
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e004      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	613b      	str	r3, [r7, #16]
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d6a:	613b      	str	r3, [r7, #16]
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	693b      	ldr	r3, [r7, #16]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	007a1200 	.word	0x007a1200
 8001d84:	08003abc 	.word	0x08003abc
 8001d88:	08003acc 	.word	0x08003acc
 8001d8c:	003d0900 	.word	0x003d0900

08001d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b02      	ldr	r3, [pc, #8]	@ (8001da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000010 	.word	0x20000010

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da8:	f7ff fff2 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4903      	ldr	r1, [pc, #12]	@ (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003ab4 	.word	0x08003ab4

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dd0:	f7ff ffde 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4903      	ldr	r1, [pc, #12]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08003ab4 	.word	0x08003ab4

08001df4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <RCC_Delay+0x34>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <RCC_Delay+0x38>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0a5b      	lsrs	r3, r3, #9
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e10:	bf00      	nop
  }
  while (Delay --);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	60fa      	str	r2, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f9      	bne.n	8001e10 <RCC_Delay+0x1c>
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000010 	.word	0x20000010
 8001e2c:	10624dd3 	.word	0x10624dd3

08001e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e041      	b.n	8001ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fea4 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f000 fbce 	bl	8002610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e041      	b.n	8001f64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d106      	bne.n	8001efa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f839 	bl	8001f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	f000 fb7f 	bl	8002610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <HAL_TIM_PWM_Start+0x24>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e022      	b.n	8001fea <HAL_TIM_PWM_Start+0x6a>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d109      	bne.n	8001fbe <HAL_TIM_PWM_Start+0x3e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	e015      	b.n	8001fea <HAL_TIM_PWM_Start+0x6a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d109      	bne.n	8001fd8 <HAL_TIM_PWM_Start+0x58>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e008      	b.n	8001fea <HAL_TIM_PWM_Start+0x6a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e05e      	b.n	80020b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <HAL_TIM_PWM_Start+0x82>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002000:	e013      	b.n	800202a <HAL_TIM_PWM_Start+0xaa>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d104      	bne.n	8002012 <HAL_TIM_PWM_Start+0x92>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002010:	e00b      	b.n	800202a <HAL_TIM_PWM_Start+0xaa>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d104      	bne.n	8002022 <HAL_TIM_PWM_Start+0xa2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002020:	e003      	b.n	800202a <HAL_TIM_PWM_Start+0xaa>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fd78 	bl	8002b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_TIM_PWM_Start+0x138>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d107      	bne.n	8002052 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002050:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a18      	ldr	r2, [pc, #96]	@ (80020b8 <HAL_TIM_PWM_Start+0x138>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00e      	beq.n	800207a <HAL_TIM_PWM_Start+0xfa>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002064:	d009      	beq.n	800207a <HAL_TIM_PWM_Start+0xfa>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a14      	ldr	r2, [pc, #80]	@ (80020bc <HAL_TIM_PWM_Start+0x13c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d004      	beq.n	800207a <HAL_TIM_PWM_Start+0xfa>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <HAL_TIM_PWM_Start+0x140>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d111      	bne.n	800209e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d010      	beq.n	80020ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	e007      	b.n	80020ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40000800 	.word	0x40000800

080020c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0202 	mvn.w	r2, #2
 80020f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa63 	bl	80025da <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa56 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa65 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0204 	mvn.w	r2, #4
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fa3d 	bl	80025da <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fa30 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fa3f 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d020      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0208 	mvn.w	r2, #8
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fa17 	bl	80025da <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fa0a 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fa19 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d020      	beq.n	800220c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0210 	mvn.w	r2, #16
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2208      	movs	r2, #8
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f9f1 	bl	80025da <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f9e4 	bl	80025c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f9f3 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0201 	mvn.w	r2, #1
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f9c3 	bl	80025b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fd46 	bl	8002ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00c      	beq.n	8002278 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9c3 	bl	80025fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0220 	mvn.w	r2, #32
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fd19 	bl	8002cce <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0ae      	b.n	8002420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	f200 809f 	bhi.w	8002410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022d2:	a201      	add	r2, pc, #4	@ (adr r2, 80022d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	0800230d 	.word	0x0800230d
 80022dc:	08002411 	.word	0x08002411
 80022e0:	08002411 	.word	0x08002411
 80022e4:	08002411 	.word	0x08002411
 80022e8:	0800234d 	.word	0x0800234d
 80022ec:	08002411 	.word	0x08002411
 80022f0:	08002411 	.word	0x08002411
 80022f4:	08002411 	.word	0x08002411
 80022f8:	0800238f 	.word	0x0800238f
 80022fc:	08002411 	.word	0x08002411
 8002300:	08002411 	.word	0x08002411
 8002304:	08002411 	.word	0x08002411
 8002308:	080023cf 	.word	0x080023cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f9ea 	bl	80026ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0208 	orr.w	r2, r2, #8
 8002326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0204 	bic.w	r2, r2, #4
 8002336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6999      	ldr	r1, [r3, #24]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	619a      	str	r2, [r3, #24]
      break;
 800234a:	e064      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fa30 	bl	80027b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6999      	ldr	r1, [r3, #24]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	619a      	str	r2, [r3, #24]
      break;
 800238c:	e043      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fa79 	bl	800288c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0208 	orr.w	r2, r2, #8
 80023a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0204 	bic.w	r2, r2, #4
 80023b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69d9      	ldr	r1, [r3, #28]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	61da      	str	r2, [r3, #28]
      break;
 80023cc:	e023      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fac3 	bl	8002960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69d9      	ldr	r1, [r3, #28]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	021a      	lsls	r2, r3, #8
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	61da      	str	r2, [r3, #28]
      break;
 800240e:	e002      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
      break;
 8002414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_TIM_ConfigClockSource+0x1c>
 8002440:	2302      	movs	r3, #2
 8002442:	e0b4      	b.n	80025ae <HAL_TIM_ConfigClockSource+0x186>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800246a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800247c:	d03e      	beq.n	80024fc <HAL_TIM_ConfigClockSource+0xd4>
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002482:	f200 8087 	bhi.w	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800248a:	f000 8086 	beq.w	800259a <HAL_TIM_ConfigClockSource+0x172>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002492:	d87f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b70      	cmp	r3, #112	@ 0x70
 8002496:	d01a      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xa6>
 8002498:	2b70      	cmp	r3, #112	@ 0x70
 800249a:	d87b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b60      	cmp	r3, #96	@ 0x60
 800249e:	d050      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x11a>
 80024a0:	2b60      	cmp	r3, #96	@ 0x60
 80024a2:	d877      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b50      	cmp	r3, #80	@ 0x50
 80024a6:	d03c      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xfa>
 80024a8:	2b50      	cmp	r3, #80	@ 0x50
 80024aa:	d873      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b40      	cmp	r3, #64	@ 0x40
 80024ae:	d058      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x13a>
 80024b0:	2b40      	cmp	r3, #64	@ 0x40
 80024b2:	d86f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b30      	cmp	r3, #48	@ 0x30
 80024b6:	d064      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024b8:	2b30      	cmp	r3, #48	@ 0x30
 80024ba:	d86b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d060      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d867      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05c      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d05a      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024cc:	e062      	b.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024de:	f000 fb04 	bl	8002aea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
      break;
 80024fa:	e04f      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800250c:	f000 faed 	bl	8002aea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800251e:	609a      	str	r2, [r3, #8]
      break;
 8002520:	e03c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	461a      	mov	r2, r3
 8002530:	f000 fa64 	bl	80029fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2150      	movs	r1, #80	@ 0x50
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fabb 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002540:	e02c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800254e:	461a      	mov	r2, r3
 8002550:	f000 fa82 	bl	8002a58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2160      	movs	r1, #96	@ 0x60
 800255a:	4618      	mov	r0, r3
 800255c:	f000 faab 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002560:	e01c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800256e:	461a      	mov	r2, r3
 8002570:	f000 fa44 	bl	80029fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2140      	movs	r1, #64	@ 0x40
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fa9b 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002580:	e00c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f000 fa92 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002592:	e003      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e000      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800259a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a2f      	ldr	r2, [pc, #188]	@ (80026e0 <TIM_Base_SetConfig+0xd0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00b      	beq.n	8002640 <TIM_Base_SetConfig+0x30>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800262e:	d007      	beq.n	8002640 <TIM_Base_SetConfig+0x30>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a2c      	ldr	r2, [pc, #176]	@ (80026e4 <TIM_Base_SetConfig+0xd4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d003      	beq.n	8002640 <TIM_Base_SetConfig+0x30>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a2b      	ldr	r2, [pc, #172]	@ (80026e8 <TIM_Base_SetConfig+0xd8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d108      	bne.n	8002652 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a22      	ldr	r2, [pc, #136]	@ (80026e0 <TIM_Base_SetConfig+0xd0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00b      	beq.n	8002672 <TIM_Base_SetConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002660:	d007      	beq.n	8002672 <TIM_Base_SetConfig+0x62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <TIM_Base_SetConfig+0xd4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d003      	beq.n	8002672 <TIM_Base_SetConfig+0x62>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <TIM_Base_SetConfig+0xd8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d108      	bne.n	8002684 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <TIM_Base_SetConfig+0xd0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d103      	bne.n	80026b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f023 0201 	bic.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]
  }
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800

080026ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f023 0201 	bic.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f023 0302 	bic.w	r3, r3, #2
 8002734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a1c      	ldr	r2, [pc, #112]	@ (80027b4 <TIM_OC1_SetConfig+0xc8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10c      	bne.n	8002762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0308 	bic.w	r3, r3, #8
 800274e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a13      	ldr	r2, [pc, #76]	@ (80027b4 <TIM_OC1_SetConfig+0xc8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d111      	bne.n	800278e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	621a      	str	r2, [r3, #32]
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00

080027b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f023 0210 	bic.w	r2, r3, #16
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f023 0320 	bic.w	r3, r3, #32
 8002802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a1d      	ldr	r2, [pc, #116]	@ (8002888 <TIM_OC2_SetConfig+0xd0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d10d      	bne.n	8002834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800281e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <TIM_OC2_SetConfig+0xd0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d113      	bne.n	8002864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800284a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	40012c00 	.word	0x40012c00

0800288c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	@ (800295c <TIM_OC3_SetConfig+0xd0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10d      	bne.n	8002906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a14      	ldr	r2, [pc, #80]	@ (800295c <TIM_OC3_SetConfig+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	621a      	str	r2, [r3, #32]
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00

08002960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	031b      	lsls	r3, r3, #12
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a0f      	ldr	r2, [pc, #60]	@ (80029f8 <TIM_OC4_SetConfig+0x98>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d109      	bne.n	80029d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00

080029fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0201 	bic.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 030a 	bic.w	r3, r3, #10
 8002a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0210 	bic.w	r2, r3, #16
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	031b      	lsls	r3, r3, #12
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 0307 	orr.w	r3, r3, #7
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	021a      	lsls	r2, r3, #8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	609a      	str	r2, [r3, #8]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1a      	ldr	r2, [r3, #32]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e046      	b.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a16      	ldr	r2, [pc, #88]	@ (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd4:	d009      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a12      	ldr	r2, [pc, #72]	@ (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a10      	ldr	r2, [pc, #64]	@ (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10c      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800

08002c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e03d      	b.n	8002cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e042      	b.n	8002d8a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7fd fffb 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2224      	movs	r2, #36	@ 0x24
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fcd4 	bl	80036e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d112      	bne.n	8002dd2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Receive_IT+0x26>
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e00b      	b.n	8002dd4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fab6 	bl	800333a <UART_Start_Receive_IT>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	e000      	b.n	8002dd4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b0ba      	sub	sp, #232	@ 0xe8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_UART_IRQHandler+0x66>
 8002e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fb93 	bl	8003566 <UART_Receive_IT>
      return;
 8002e40:	e25b      	b.n	80032fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80de 	beq.w	8003008 <HAL_UART_IRQHandler+0x22c>
 8002e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80d1 	beq.w	8003008 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_UART_IRQHandler+0xae>
 8002e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_UART_IRQHandler+0xd2>
 8002e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f043 0202 	orr.w	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xf6>
 8002eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f043 0204 	orr.w	r2, r3, #4
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d011      	beq.n	8002f02 <HAL_UART_IRQHandler+0x126>
 8002ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	f043 0208 	orr.w	r2, r3, #8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 81f2 	beq.w	80032f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_UART_IRQHandler+0x14e>
 8002f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fb1e 	bl	8003566 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <HAL_UART_IRQHandler+0x17a>
 8002f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d04f      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fa28 	bl	80033ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d041      	beq.n	8002fee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3314      	adds	r3, #20
 8002f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3314      	adds	r3, #20
 8002f92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fa6:	e841 2300 	strex	r3, r2, [r1]
 8002faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1d9      	bne.n	8002f6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d013      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80031bc <HAL_UART_IRQHandler+0x3e0>)
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe f90c 	bl	80011e8 <HAL_DMA_Abort_IT>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e00e      	b.n	8003004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f993 	bl	8003312 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e00a      	b.n	8003004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f98f 	bl	8003312 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	e006      	b.n	8003004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f98b 	bl	8003312 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003002:	e175      	b.n	80032f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	bf00      	nop
    return;
 8003006:	e173      	b.n	80032f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	2b01      	cmp	r3, #1
 800300e:	f040 814f 	bne.w	80032b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8148 	beq.w	80032b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8141 	beq.w	80032b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80b6 	beq.w	80031c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003060:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8145 	beq.w	80032f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800306e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003072:	429a      	cmp	r2, r3
 8003074:	f080 813e 	bcs.w	80032f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800307e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b20      	cmp	r3, #32
 8003088:	f000 8088 	beq.w	800319c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1d9      	bne.n	800308c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3314      	adds	r3, #20
 80030de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003100:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003104:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800310e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e1      	bne.n	80030d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3314      	adds	r3, #20
 800311a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800312a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003138:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800313a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800313e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e3      	bne.n	8003114 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800316a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800316c:	f023 0310 	bic.w	r3, r3, #16
 8003170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800317e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003180:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003184:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800318c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e3      	bne.n	800315a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd ffeb 	bl	8001172 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8b6 	bl	8003324 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031b8:	e09c      	b.n	80032f4 <HAL_UART_IRQHandler+0x518>
 80031ba:	bf00      	nop
 80031bc:	08003471 	.word	0x08003471
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 808e 	beq.w	80032f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8089 	beq.w	80032f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800320a:	647a      	str	r2, [r7, #68]	@ 0x44
 800320c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003210:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e3      	bne.n	80031e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3314      	adds	r3, #20
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	623b      	str	r3, [r7, #32]
   return(result);
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3314      	adds	r3, #20
 800323e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003242:	633a      	str	r2, [r7, #48]	@ 0x30
 8003244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1e3      	bne.n	800321e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	60fb      	str	r3, [r7, #12]
   return(result);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0310 	bic.w	r3, r3, #16
 800327a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003288:	61fa      	str	r2, [r7, #28]
 800328a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	617b      	str	r3, [r7, #20]
   return(result);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e3      	bne.n	8003264 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f83b 	bl	8003324 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032ae:	e023      	b.n	80032f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d009      	beq.n	80032d0 <HAL_UART_IRQHandler+0x4f4>
 80032bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8e5 	bl	8003498 <UART_Transmit_IT>
    return;
 80032ce:	e014      	b.n	80032fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <HAL_UART_IRQHandler+0x51e>
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f924 	bl	8003536 <UART_EndTransmit_IT>
    return;
 80032ee:	e004      	b.n	80032fa <HAL_UART_IRQHandler+0x51e>
    return;
 80032f0:	bf00      	nop
 80032f2:	e002      	b.n	80032fa <HAL_UART_IRQHandler+0x51e>
      return;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_UART_IRQHandler+0x51e>
      return;
 80032f8:	bf00      	nop
  }
}
 80032fa:	37e8      	adds	r7, #232	@ 0xe8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	4613      	mov	r3, r2
 8003346:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2222      	movs	r2, #34	@ 0x22
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800337e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0220 	orr.w	r2, r2, #32
 800339e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b095      	sub	sp, #84	@ 0x54
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3314      	adds	r3, #20
 8003406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003408:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800340e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	2b01      	cmp	r3, #1
 8003422:	d119      	bne.n	8003458 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	60bb      	str	r3, [r7, #8]
   return(result);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	647b      	str	r3, [r7, #68]	@ 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003444:	61ba      	str	r2, [r7, #24]
 8003446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6979      	ldr	r1, [r7, #20]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	613b      	str	r3, [r7, #16]
   return(result);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003466:	bf00      	nop
 8003468:	3754      	adds	r7, #84	@ 0x54
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ff41 	bl	8003312 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b21      	cmp	r3, #33	@ 0x21
 80034aa:	d13e      	bne.n	800352a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b4:	d114      	bne.n	80034e0 <UART_Transmit_IT+0x48>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d110      	bne.n	80034e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	1c9a      	adds	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	621a      	str	r2, [r3, #32]
 80034de:	e008      	b.n	80034f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	1c59      	adds	r1, r3, #1
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6211      	str	r1, [r2, #32]
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4619      	mov	r1, r3
 8003500:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003514:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003524:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e000      	b.n	800352c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
  }
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800354c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff fed2 	bl	8003300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08c      	sub	sp, #48	@ 0x30
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b22      	cmp	r3, #34	@ 0x22
 8003578:	f040 80ae 	bne.w	80036d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003584:	d117      	bne.n	80035b6 <UART_Receive_IT+0x50>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d113      	bne.n	80035b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	1c9a      	adds	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80035b4:	e026      	b.n	8003604 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c8:	d007      	beq.n	80035da <UART_Receive_IT+0x74>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <UART_Receive_IT+0x82>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e008      	b.n	80035fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4619      	mov	r1, r3
 8003612:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003614:	2b00      	cmp	r3, #0
 8003616:	d15d      	bne.n	80036d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0220 	bic.w	r2, r2, #32
 8003626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	2b01      	cmp	r3, #1
 800365c:	d135      	bne.n	80036ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	613b      	str	r3, [r7, #16]
   return(result);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f023 0310 	bic.w	r3, r3, #16
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003684:	623a      	str	r2, [r7, #32]
 8003686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	69f9      	ldr	r1, [r7, #28]
 800368a:	6a3a      	ldr	r2, [r7, #32]
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	61bb      	str	r3, [r7, #24]
   return(result);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d10a      	bne.n	80036bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fe2e 	bl	8003324 <HAL_UARTEx_RxEventCallback>
 80036c8:	e002      	b.n	80036d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fc fdaa 	bl	8000224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e002      	b.n	80036da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036d8:	2302      	movs	r3, #2
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3730      	adds	r7, #48	@ 0x30
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800371e:	f023 030c 	bic.w	r3, r3, #12
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	430b      	orrs	r3, r1
 800372a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2c      	ldr	r2, [pc, #176]	@ (80037f8 <UART_SetConfig+0x114>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d103      	bne.n	8003754 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800374c:	f7fe fb3e 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	e002      	b.n	800375a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003754:	f7fe fb26 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8003758:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009a      	lsls	r2, r3, #2
 8003764:	441a      	add	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	4a22      	ldr	r2, [pc, #136]	@ (80037fc <UART_SetConfig+0x118>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	0119      	lsls	r1, r3, #4
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009a      	lsls	r2, r3, #2
 8003784:	441a      	add	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003790:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <UART_SetConfig+0x118>)
 8003792:	fba3 0302 	umull	r0, r3, r3, r2
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2064      	movs	r0, #100	@ 0x64
 800379a:	fb00 f303 	mul.w	r3, r0, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	3332      	adds	r3, #50	@ 0x32
 80037a4:	4a15      	ldr	r2, [pc, #84]	@ (80037fc <UART_SetConfig+0x118>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b0:	4419      	add	r1, r3
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009a      	lsls	r2, r3, #2
 80037bc:	441a      	add	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c8:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <UART_SetConfig+0x118>)
 80037ca:	fba3 0302 	umull	r0, r3, r3, r2
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2064      	movs	r0, #100	@ 0x64
 80037d2:	fb00 f303 	mul.w	r3, r0, r3
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3332      	adds	r3, #50	@ 0x32
 80037dc:	4a07      	ldr	r2, [pc, #28]	@ (80037fc <UART_SetConfig+0x118>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 020f 	and.w	r2, r3, #15
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	440a      	add	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40013800 	.word	0x40013800
 80037fc:	51eb851f 	.word	0x51eb851f

08003800 <pwm_set_duty>:
#include "Pwm_lib.h"

void pwm_set_duty(TIM_HandleTypeDef *tim, uint16_t channel, uint8_t duty)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
 800380c:	4613      	mov	r3, r2
 800380e:	707b      	strb	r3, [r7, #1]
	uint16_t ccr = (uint16_t)duty*(tim->Instance->ARR)/100;
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	4a0c      	ldr	r2, [pc, #48]	@ (8003850 <pwm_set_duty+0x50>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	81fb      	strh	r3, [r7, #14]
	switch(channel)
 8003826:	887b      	ldrh	r3, [r7, #2]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <pwm_set_duty+0x32>
 800382c:	2b04      	cmp	r3, #4
 800382e:	d005      	beq.n	800383c <pwm_set_duty+0x3c>
//			break;
//		case TIM_CHANNEL_4:
//			tim->Instance->CCR4 = ccr;
//			break;
	}
}
 8003830:	e009      	b.n	8003846 <pwm_set_duty+0x46>
			tim->Instance->CCR1 = ccr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	89fa      	ldrh	r2, [r7, #14]
 8003838:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800383a:	e004      	b.n	8003846 <pwm_set_duty+0x46>
			tim->Instance->CCR2 = ccr;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	89fa      	ldrh	r2, [r7, #14]
 8003842:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8003844:	bf00      	nop
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	51eb851f 	.word	0x51eb851f

08003854 <car_control>:

Motor_TypeDef motor_left;
Motor_TypeDef motor_right;

void car_control(Car_State car_state, uint8_t speed)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	460a      	mov	r2, r1
 800385e:	71fb      	strb	r3, [r7, #7]
 8003860:	4613      	mov	r3, r2
 8003862:	71bb      	strb	r3, [r7, #6]
	switch(car_state)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	2b04      	cmp	r3, #4
 8003868:	d849      	bhi.n	80038fe <car_control+0xaa>
 800386a:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <car_control+0x1c>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003885 	.word	0x08003885
 8003874:	0800389b 	.word	0x0800389b
 8003878:	080038b5 	.word	0x080038b5
 800387c:	080038cf 	.word	0x080038cf
 8003880:	080038e7 	.word	0x080038e7
	{
		case CAR_STOP_STATE:
			motor_control(&motor_left, MOTOR_STOP,0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	481f      	ldr	r0, [pc, #124]	@ (8003908 <car_control+0xb4>)
 800388a:	f000 f863 	bl	8003954 <motor_control>
			motor_control(&motor_right, MOTOR_STOP,0);
 800388e:	2200      	movs	r2, #0
 8003890:	2100      	movs	r1, #0
 8003892:	481e      	ldr	r0, [pc, #120]	@ (800390c <car_control+0xb8>)
 8003894:	f000 f85e 	bl	8003954 <motor_control>
			break;
 8003898:	e032      	b.n	8003900 <car_control+0xac>
		case CAR_FORWARD_STATE:
			motor_control(&motor_left, MOTOR_CW,speed);
 800389a:	79bb      	ldrb	r3, [r7, #6]
 800389c:	461a      	mov	r2, r3
 800389e:	2101      	movs	r1, #1
 80038a0:	4819      	ldr	r0, [pc, #100]	@ (8003908 <car_control+0xb4>)
 80038a2:	f000 f857 	bl	8003954 <motor_control>
			motor_control(&motor_right, MOTOR_CW,speed);
 80038a6:	79bb      	ldrb	r3, [r7, #6]
 80038a8:	461a      	mov	r2, r3
 80038aa:	2101      	movs	r1, #1
 80038ac:	4817      	ldr	r0, [pc, #92]	@ (800390c <car_control+0xb8>)
 80038ae:	f000 f851 	bl	8003954 <motor_control>
			break;
 80038b2:	e025      	b.n	8003900 <car_control+0xac>
		case CAR_BACKWARD_STATE:
			motor_control(&motor_left, MOTOR_CCW,speed);
 80038b4:	79bb      	ldrb	r3, [r7, #6]
 80038b6:	461a      	mov	r2, r3
 80038b8:	2102      	movs	r1, #2
 80038ba:	4813      	ldr	r0, [pc, #76]	@ (8003908 <car_control+0xb4>)
 80038bc:	f000 f84a 	bl	8003954 <motor_control>
			motor_control(&motor_right, MOTOR_CCW,speed);
 80038c0:	79bb      	ldrb	r3, [r7, #6]
 80038c2:	461a      	mov	r2, r3
 80038c4:	2102      	movs	r1, #2
 80038c6:	4811      	ldr	r0, [pc, #68]	@ (800390c <car_control+0xb8>)
 80038c8:	f000 f844 	bl	8003954 <motor_control>
			break;
 80038cc:	e018      	b.n	8003900 <car_control+0xac>
		case CAR_LEFT_STATE:
			motor_control(&motor_left, MOTOR_STOP,0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	480d      	ldr	r0, [pc, #52]	@ (8003908 <car_control+0xb4>)
 80038d4:	f000 f83e 	bl	8003954 <motor_control>
			motor_control(&motor_right, MOTOR_CW,speed);
 80038d8:	79bb      	ldrb	r3, [r7, #6]
 80038da:	461a      	mov	r2, r3
 80038dc:	2101      	movs	r1, #1
 80038de:	480b      	ldr	r0, [pc, #44]	@ (800390c <car_control+0xb8>)
 80038e0:	f000 f838 	bl	8003954 <motor_control>
			break;
 80038e4:	e00c      	b.n	8003900 <car_control+0xac>
		case CAR_RIGHT_STATE:
			motor_control(&motor_left, MOTOR_CW,speed);
 80038e6:	79bb      	ldrb	r3, [r7, #6]
 80038e8:	461a      	mov	r2, r3
 80038ea:	2101      	movs	r1, #1
 80038ec:	4806      	ldr	r0, [pc, #24]	@ (8003908 <car_control+0xb4>)
 80038ee:	f000 f831 	bl	8003954 <motor_control>
			motor_control(&motor_right, MOTOR_STOP,0);
 80038f2:	2200      	movs	r2, #0
 80038f4:	2100      	movs	r1, #0
 80038f6:	4805      	ldr	r0, [pc, #20]	@ (800390c <car_control+0xb8>)
 80038f8:	f000 f82c 	bl	8003954 <motor_control>
			break;
 80038fc:	e000      	b.n	8003900 <car_control+0xac>
		default:
			break;
 80038fe:	bf00      	nop
	}
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000124 	.word	0x20000124
 800390c:	20000138 	.word	0x20000138

08003910 <car_init>:

void car_init(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af02      	add	r7, sp, #8
 8003916:	6078      	str	r0, [r7, #4]
	motor_init(&motor_right,GPIOB,GPIO_PIN_5,htim,TIM_CHANNEL_2);
 8003918:	2304      	movs	r3, #4
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	4909      	ldr	r1, [pc, #36]	@ (8003948 <car_init+0x38>)
 8003922:	480a      	ldr	r0, [pc, #40]	@ (800394c <car_init+0x3c>)
 8003924:	f000 f865 	bl	80039f2 <motor_init>
	motor_init(&motor_left,GPIOB,GPIO_PIN_4,htim,TIM_CHANNEL_1);
 8003928:	2300      	movs	r3, #0
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2210      	movs	r2, #16
 8003930:	4905      	ldr	r1, [pc, #20]	@ (8003948 <car_init+0x38>)
 8003932:	4807      	ldr	r0, [pc, #28]	@ (8003950 <car_init+0x40>)
 8003934:	f000 f85d 	bl	80039f2 <motor_init>
	car_control(CAR_STOP_STATE,0);
 8003938:	2100      	movs	r1, #0
 800393a:	2000      	movs	r0, #0
 800393c:	f7ff ff8a 	bl	8003854 <car_control>
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40010c00 	.word	0x40010c00
 800394c:	20000138 	.word	0x20000138
 8003950:	20000124 	.word	0x20000124

08003954 <motor_control>:
#include "motor_lib.h"
#include "Pwm_lib.h"

void motor_control(Motor_TypeDef *motor, MotorState state, uint8_t speed )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
 8003960:	4613      	mov	r3, r2
 8003962:	70bb      	strb	r3, [r7, #2]
	switch(state)// state
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d02a      	beq.n	80039c0 <motor_control+0x6c>
 800396a:	2b02      	cmp	r3, #2
 800396c:	dc3d      	bgt.n	80039ea <motor_control+0x96>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <motor_control+0x24>
 8003972:	2b01      	cmp	r3, #1
 8003974:	d012      	beq.n	800399c <motor_control+0x48>
		case MOTOR_CCW:
			HAL_GPIO_WritePin(motor->io_port, motor->io_pin, GPIO_PIN_SET);
			pwm_set_duty(motor->tim,motor->tim_channel, 100 - speed);
			break;
	}
}
 8003976:	e038      	b.n	80039ea <motor_control+0x96>
			HAL_GPIO_WritePin(motor->io_port, motor->io_pin, GPIO_PIN_RESET);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	889b      	ldrh	r3, [r3, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	4619      	mov	r1, r3
 8003984:	f7fd fe2c 	bl	80015e0 <HAL_GPIO_WritePin>
			pwm_set_duty(motor->tim,motor->tim_channel, 0);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6898      	ldr	r0, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	b29b      	uxth	r3, r3
 8003992:	2200      	movs	r2, #0
 8003994:	4619      	mov	r1, r3
 8003996:	f7ff ff33 	bl	8003800 <pwm_set_duty>
			break;
 800399a:	e026      	b.n	80039ea <motor_control+0x96>
			HAL_GPIO_WritePin(motor->io_port, motor->io_pin, GPIO_PIN_RESET);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	889b      	ldrh	r3, [r3, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7fd fe1a 	bl	80015e0 <HAL_GPIO_WritePin>
			pwm_set_duty(motor->tim,motor->tim_channel, speed);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6898      	ldr	r0, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	78ba      	ldrb	r2, [r7, #2]
 80039b8:	4619      	mov	r1, r3
 80039ba:	f7ff ff21 	bl	8003800 <pwm_set_duty>
			break;
 80039be:	e014      	b.n	80039ea <motor_control+0x96>
			HAL_GPIO_WritePin(motor->io_port, motor->io_pin, GPIO_PIN_SET);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	889b      	ldrh	r3, [r3, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	4619      	mov	r1, r3
 80039cc:	f7fd fe08 	bl	80015e0 <HAL_GPIO_WritePin>
			pwm_set_duty(motor->tim,motor->tim_channel, 100 - speed);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6898      	ldr	r0, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	b299      	uxth	r1, r3
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7ff ff0c 	bl	8003800 <pwm_set_duty>
			break;
 80039e8:	bf00      	nop
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <motor_init>:

void motor_init(Motor_TypeDef *motor,GPIO_TypeDef *io_port,
		uint16_t io_pin,TIM_HandleTypeDef *tim,uint32_t tim_channel)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
	motor->io_port = io_port;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	601a      	str	r2, [r3, #0]
	motor->io_pin  = io_pin;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	809a      	strh	r2, [r3, #4]
	motor->tim = tim;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	609a      	str	r2, [r3, #8]
	motor->tim_channel = tim_channel;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(motor->tim, motor->tim_channel);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	4619      	mov	r1, r3
 8003a24:	4610      	mov	r0, r2
 8003a26:	f7fe faab 	bl	8001f80 <HAL_TIM_PWM_Start>
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <memset>:
 8003a32:	4603      	mov	r3, r0
 8003a34:	4402      	add	r2, r0
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d100      	bne.n	8003a3c <memset+0xa>
 8003a3a:	4770      	bx	lr
 8003a3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003a40:	e7f9      	b.n	8003a36 <memset+0x4>
	...

08003a44 <__libc_init_array>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	2600      	movs	r6, #0
 8003a48:	4d0c      	ldr	r5, [pc, #48]	@ (8003a7c <__libc_init_array+0x38>)
 8003a4a:	4c0d      	ldr	r4, [pc, #52]	@ (8003a80 <__libc_init_array+0x3c>)
 8003a4c:	1b64      	subs	r4, r4, r5
 8003a4e:	10a4      	asrs	r4, r4, #2
 8003a50:	42a6      	cmp	r6, r4
 8003a52:	d109      	bne.n	8003a68 <__libc_init_array+0x24>
 8003a54:	f000 f81a 	bl	8003a8c <_init>
 8003a58:	2600      	movs	r6, #0
 8003a5a:	4d0a      	ldr	r5, [pc, #40]	@ (8003a84 <__libc_init_array+0x40>)
 8003a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a88 <__libc_init_array+0x44>)
 8003a5e:	1b64      	subs	r4, r4, r5
 8003a60:	10a4      	asrs	r4, r4, #2
 8003a62:	42a6      	cmp	r6, r4
 8003a64:	d105      	bne.n	8003a72 <__libc_init_array+0x2e>
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a6c:	4798      	blx	r3
 8003a6e:	3601      	adds	r6, #1
 8003a70:	e7ee      	b.n	8003a50 <__libc_init_array+0xc>
 8003a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a76:	4798      	blx	r3
 8003a78:	3601      	adds	r6, #1
 8003a7a:	e7f2      	b.n	8003a62 <__libc_init_array+0x1e>
 8003a7c:	08003ad0 	.word	0x08003ad0
 8003a80:	08003ad0 	.word	0x08003ad0
 8003a84:	08003ad0 	.word	0x08003ad0
 8003a88:	08003ad4 	.word	0x08003ad4

08003a8c <_init>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr

08003a98 <_fini>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr
